#!/bin/bash
# -----------------------------------------------------------------------------
set -euo pipefail # Stop running the script on first error...
# -----------------------------------------------------------------------------
source .env

deploy() {
    package=$1
    target=$2
    shift
    shift
    
    # Build and download all the helm dependencies
    helm dep update ./helm/$package
    
    DEPLOY_ARGS=$(cat ./config/${CLOUD_PROVIDER}/deploy.ini \
        | sed '/^[[:space:]]*$/d' \
        | sed 's/^/--set-string "/' \
        | sed 's/$/"/' \
        | tr '\n' ' ' \
    )
    sh << EOF
        helm upgrade --install $target \
            -n ${NAMESPACE} \
            ./helm/$package \
            --set-string "app.name=${PROJECT}" \
            --set-string "app.image=${REGISTRY}/${IMAGE_ID}" \
            --values "./config/${CLOUD_PROVIDER}/values.yaml" \
            $(cat ./config/${CLOUD_PROVIDER}/deploy.ini | sed '/^[[:space:]]*$/d' | sed 's/^/--set-string "/' | sed 's/$/"/' | tr '\n' ' ') \
            $DEPLOY_ARGS \
            $@
EOF
}

storage() {
    # Only install the storage bindings once (cannot be modified afterwards)
    if ! helm history "storage" > /dev/null 2>&1;
    then
        deploy "storage" "storage"
    fi
}

bootstrap() {
    DEPLOY_TARGET=${1:-blue}
    DEPLOY_PORT=${PORT:-8080}
    case ${DEPLOY_TARGET:-} in
        blue)
            DEPLOY_PORT=8080
        ;;
        green)
            DEPLOY_PORT=8081
        ;;
        canary)
            DEPLOY_PORT=8088
        ;;
        *)
            # Default: Remove all known deployments (if they exist)
            printf "\nError: Unknown deployment type '${DEPLOY_TARGET:-}'. \n"
            printf "Hint: Try specifying 'blue', 'green' or 'canary' as the target... \n\n"
            exit 1
        ;;
    esac
    
    # Bootstrap and deploy our project that binds to the provided storage
    storage # Provision storage once...
    deploy "${PROJECT}" "${DEPLOY_TARGET}-app" \
    --set-string "app.name=${DEPLOY_TARGET}-app" \
    --set-string "app.port=${DEPLOY_PORT}" \
    --set-string "app.variant=${DEPLOY_TARGET}" \
    --wait --force
    
    # Show the publically accessable URL
    BASE_URL=
    : ${BASE_URL:=$(kubectl get service ${DEPLOY_TARGET}-app-svc -o json | jq -r '.status.loadBalancer.ingress[].ip' | sed 's/null//' | tr -d '\n')}
    : ${BASE_URL:=$(kubectl get service ${DEPLOY_TARGET}-app-svc -o json | jq -r '.status.loadBalancer.ingress[].hostname' | sed 's/null//' | tr -d '\n')}
    printf "\n -> Check out demo at: http://$BASE_URL:$DEPLOY_PORT/ \n\n"
}

# Start the application deployment
bootstrap $@



# Or you can deploy a sample application to the target K8S cluster that we provisioned
# kubectl create deployment ${PROJECT} --image=${REGISTRY}/${IMAGE_ID} --dry-run=true -o yaml | kubectl apply --wait -f -
# kubectl expose deployment ${PROJECT} --type=LoadBalancer --port 5000 --target-port 5000 --dry-run=true -o yaml | kubectl apply --wait -f -
# kubectl get service